searchState.loadedDescShard("customlog", 0, "On drop, calls <code>log::logger()::flush()</code>.\nFor debug\nAbsolute path to the main log file\nSet panic hook that calls FlushGuard::drop.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFlushGuard must be dropped on the end of the program. …\nInitialize with ConsoleLogger + Console::Stdout + …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLock for log\nStdout/Stderr is redirected?\nFor debug\nFlush if needed, then write to write_buf\nAbsolute path to the main log file\nCalled when buffer becomes full and when log::flush() is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOpen with (create + append), return File and size.\nLock for log\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")